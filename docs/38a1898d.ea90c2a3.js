(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{110:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return l})),t.d(n,"MDXProvider",(function(){return u})),t.d(n,"mdx",(function(){return b})),t.d(n,"useMDXComponents",(function(){return d})),t.d(n,"withMDXComponents",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),m=function(e){return function(n){var t=d(n.components);return r.a.createElement(e,o({},n,{components:t}))}},d=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=d(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},g=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=d(t),m=a,u=l["".concat(o,".").concat(m)]||l[m]||f[m]||i;return t?r.a.createElement(u,c(c({ref:n},s),{},{components:t})):r.a.createElement(u,c({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},41:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(3),r=(t(0),t(110));const i={title:"Cameras"},o={unversionedId:"input-api/inputs/cameras",id:"input-api/inputs/cameras",isDocsHomePage:!1,title:"Cameras",description:"A Cameras input consists of a single frame of camera images, where the frame can contain between 1-8",source:"@site/docs/input-api/inputs/cameras.md",slug:"/input-api/inputs/cameras",permalink:"/annotell-python/docs/input-api/inputs/cameras",editUrl:"https://github.com/annotell/annotell-python/edit/gh-pages/docs-src/docs/input-api/inputs/cameras.md",version:"current",sidebar:"docs",previous:{title:"Point Cloud With Images (v0)",permalink:"/annotell-python/docs/input-api/inputs/point_cloud_with_images"},next:{title:"Lidars \ud83d\udea7",permalink:"/annotell-python/docs/input-api/inputs/lidars"}},s=[{value:"Frames",id:"frames",children:[]},{value:"Creating the input",id:"creating-the-input",children:[{value:"Frame",id:"frame",children:[]},{value:"external_id",id:"external_id",children:[]},{value:"SensorSpecification",id:"sensorspecification",children:[]}]}],c={rightToc:s};function p({components:e,...n}){return Object(r.mdx)("wrapper",Object(a.default)({},c,n,{components:e,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"A ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cameras")," input consists of a single frame of camera images, where the frame can contain between 1-8\nimages from different sensors."),Object(r.mdx)("h2",{id:"frames"},"Frames"),Object(r.mdx)("p",null,"All of the inputs at Annotell consists of one or several ",Object(r.mdx)("strong",{parentName:"p"},"frames")," where a\nframe consists of inputs from several sensors, e.g. cameras or lidars.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"Cameras")," input consists of a single frame, which simply contains a list of images and are\neasily created in the client."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-python"}),'import annotell.input_api.model.input.resource as ResourceModel\nimport annotell.input_api.model.input.cameras as CamerasModel\n\nsensor1 = "RFC01"\nsensor2 = "RFC02"\nsensor3 = "RFC03"\n\nframe = CamerasModel.Frame(\n     images=[\n         ResourceModel.Image("~/Downloads/img_RFC01.jpg", sensor_name=sensor1),\n         ResourceModel.Image("~/Downloads/img_RFC01.jpg", sensor_name=sensor2),\n         ResourceModel.Image("~/Downloads/img_RFC01.jpg", sensor_name=sensor3)\n     ])\n')),Object(r.mdx)("h2",{id:"creating-the-input"},"Creating the input"),Object(r.mdx)("p",null,"In order to create the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cameras")," input we need to specify three parameters: the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Frame")," object,\nthe ",Object(r.mdx)("inlineCode",{parentName:"p"},"external_id")," and a ",Object(r.mdx)("inlineCode",{parentName:"p"},"SensorSpecification")," object."),Object(r.mdx)("h3",{id:"frame"},"Frame"),Object(r.mdx)("p",null,"The frame of the input, which is described in detail in the previous chapter."),Object(r.mdx)("h3",{id:"external_id"},"external_id"),Object(r.mdx)("p",null,"An id which can be used to get your inputs via the client, or to get the annotations\nrelated to the input."),Object(r.mdx)("h3",{id:"sensorspecification"},"SensorSpecification"),Object(r.mdx)("p",null,"Includes the fields ",Object(r.mdx)("inlineCode",{parentName:"p"},"sensor_to_pretty_name"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"sensor_order")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"sensor_settings"),"."),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"sensor_to_pretty_name")," is a mapping of sensor names to a prettier name version\ndisplayed in the Annotell Annotation Tool."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"sensor_order")," defines in what order the camera sensors that should be shown\nin the Annotell Annotation Tool."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"sensor_settings")," is a mapping of a sensor name to a ",Object(r.mdx)("inlineCode",{parentName:"li"},"CameraSettings")," object.\nThe ",Object(r.mdx)("inlineCode",{parentName:"li"},"CameraSettings")," object consists of the resolution of the video/image.")),Object(r.mdx)("p",null,"All that is left after creating the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cameras")," object is selecting which project\nto upload the input to and then call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"create")," method for cameras."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-python"}),'from __future__ import absolute_import\n\nfrom annotell.input_api.input_api_client import InputApiClient\nimport annotell.input_api.model.input as InputModel\nimport annotell.input_api.model.input.cameras as CamerasModel\nimport annotell.input_api.model.input.resource as ResourceModel\nfrom annotell.input_api.logger import setup_logging\n\nfrom calibration import create_calibration_spec\n\nprint("Creating Cameras Input...")\n\nsetup_logging(level="INFO")\n\nclient = InputApiClient()\n\nsensor1 = "RFC01"\nsensor2 = "RFC02"\nsensor3 = "RFC03"\n\n# Create calibration\ncamera_settings = InputModel.CameraSettings(width=1920, height=1080)\nsensor_settings = {\n  sensor1: camera_settings,\n  sensor2: camera_settings,\n  sensor3: camera_settings\n}\n\nsensor_specification = InputModel.SensorSpecification(sensor_settings=sensor_settings)\n\ncameras = CamerasModel.Cameras(\n   external_id="input1",\n   frame=CamerasModel.Frame(\n       images=[\n           ResourceModel.Image("~/Downloads/img_RFC01.jpg", sensor_name=sensor1),\n           ResourceModel.Image("~/Downloads/img_RFC01.jpg", sensor_name=sensor2),\n           ResourceModel.Image("~/Downloads/img_RFC01.jpg", sensor_name=sensor3)\n       ]\n   ),\n   sensor_specification=sensor_specification\n)\n\n# Project - Available via `client.project.get_projects()`\nproject = "project-identifier"\n\n# Add input\nclient.cameras.create(cameras, project=project, dryrun=True)\n')),Object(r.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.mdx)("div",Object(a.default)({parentName:"div"},{className:"admonition-heading"}),Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",Object(a.default)({parentName:"h5"},{className:"admonition-icon"}),Object(r.mdx)("svg",Object(a.default)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.mdx)("path",Object(a.default)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Use dryrun to validate input")),Object(r.mdx)("div",Object(a.default)({parentName:"div"},{className:"admonition-content"}),Object(r.mdx)("p",{parentName:"div"},"Setting ",Object(r.mdx)("inlineCode",{parentName:"p"},"dryrun")," parameter to true in the method call, will validate the input using the Input API but not create any inputs."))))}p.isMDXComponent=!0}}]);