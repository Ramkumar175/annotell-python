(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{111:function(n,e,t){"use strict";t.r(e),t.d(e,"MDXContext",(function(){return d})),t.d(e,"MDXProvider",(function(){return m})),t.d(e,"mdx",(function(){return f})),t.d(e,"useMDXComponents",(function(){return u})),t.d(e,"withMDXComponents",(function(){return s}));var a=t(0),o=t.n(a);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(){return(r=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(n[a]=t[a])}return n}).apply(this,arguments)}function c(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?c(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var d=o.a.createContext({}),s=function(n){return function(e){var t=u(e.components);return o.a.createElement(n,r({},e,{components:t}))}},u=function(n){var e=o.a.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},m=function(n){var e=u(n.components);return o.a.createElement(d.Provider,{value:e},n.children)},h={inlineCode:"code",wrapper:function(n){var e=n.children;return o.a.createElement(o.a.Fragment,{},e)}},b=o.a.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,r=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),d=u(t),s=a,m=d["".concat(r,".").concat(s)]||d[s]||h[s]||i;return t?o.a.createElement(m,p(p({ref:e},c),{},{components:t})):o.a.createElement(m,p({ref:e},c))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,r=new Array(i);r[0]=b;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=n,c.mdxType="string"==typeof n?n:a,r[1]=c;for(var l=2;l<i;l++)r[l]=t[l];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},42:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return r})),t.d(e,"metadata",(function(){return c})),t.d(e,"rightToc",(function(){return p})),t.d(e,"default",(function(){return d}));var a=t(3),o=t(8),i=(t(0),t(111)),r={title:"Downloading Annotations"},c={unversionedId:"input-api/annotations",id:"input-api/annotations",isDocsHomePage:!1,title:"Downloading Annotations",description:"Annotations are made available for each input and annotation type as soon as they are quality assured by the Annotell platform. Information about the format can be found in the Key Concepts section.",source:"@site/docs/input-api/annotations.md",slug:"/input-api/annotations",permalink:"/annotell-python/docs/input-api/annotations",editUrl:"https://github.com/annotell/annotell-python/edit/gh-pages/docs-src/docs/input-api/annotations.md",version:"current",sidebar:"docs",previous:{title:"Working with Inputs",permalink:"/annotell-python/docs/input-api/working_with_inputs"},next:{title:"Calibration",permalink:"/annotell-python/docs/input-api/calibration"}},p=[{value:"v1.0.x (Deprecated) \ud83d\udea8",id:"v10x-deprecated-",children:[]},{value:"v1.1.x (Upcoming release) \ud83d\udea7",id:"v11x-upcoming-release-",children:[{value:"Get Single Annotation",id:"get-single-annotation",children:[]},{value:"Get Annotations for a Project or Batch",id:"get-annotations-for-a-project-or-batch",children:[]}]}],l={rightToc:p};function d(n){var e=n.components,t=Object(o.default)(n,["components"]);return Object(i.mdx)("wrapper",Object(a.default)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,"Annotations are made available for each ",Object(i.mdx)("a",{parentName:"p",href:"overview"},"input")," and ",Object(i.mdx)("a",{parentName:"p",href:"annotation_types"},"annotation type")," as soon as they are quality assured by the Annotell platform. Information about the format can be found in the ",Object(i.mdx)("a",{parentName:"p",href:"/annotell-python/docs/#annotation"},"Key Concepts")," section."),Object(i.mdx)("h2",{id:"v10x-deprecated-"},"v1.0.x (Deprecated) \ud83d\udea8"),Object(i.mdx)("p",null,"Once annotations are available they can be downloaded by supplying a list of ",Object(i.mdx)("inlineCode",{parentName:"p"},"input_uuid"),"s for the corresponding inputs. A dictonary is returned containing available annotations for each input. Several annotations occur if the project is setup in such a way that each input should be annotated with different annotation types, e.g. Lane Markings and Objects."),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-python"},"client.annotation.get_annotations(input_uuids=[\n    'decf6479-d540-459f-b924-a12c2cecf3b5',\n    '5da4f44b-16cb-414a-8dbd-ff5e5afc309a'\n])\n")),Object(i.mdx)("p",null,"A common use case is downloading all completed annotations a project. This can be performed by first fetching all of the inputs added to the project and then filtering to only include inputs with status ",Object(i.mdx)("inlineCode",{parentName:"p"},'"created"')," (see ",Object(i.mdx)("a",{parentName:"p",href:"working_with_inputs#input-status"},"Input Statuses"),")."),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-python",metastring:"reference",reference:!0},"https://github.com/annotell/annotell-python/blob/f2b941373b1dff4297d7705ef0f2587eadbca7b3/annotell-input-api/examples/download_annotations.py#L10-L12\n")),Object(i.mdx)("h2",{id:"v11x-upcoming-release-"},"v1.1.x (Upcoming release) \ud83d\udea7"),Object(i.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(i.mdx)("h5",{parentName:"div"},Object(i.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Not avialable")),Object(i.mdx)("div",{parentName:"div",className:"admonition-content"},Object(i.mdx)("p",{parentName:"div"},"This section describes fetching OpenLABEL annotations using the Input API client, which is currently not available for use. It will be available in version 1.1.0 of ",Object(i.mdx)("inlineCode",{parentName:"p"},"annotell-input-api"),"."))),Object(i.mdx)("div",{className:"admonition admonition-info alert alert--info"},Object(i.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(i.mdx)("h5",{parentName:"div"},Object(i.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Contact Annotell before use")),Object(i.mdx)("div",{parentName:"div",className:"admonition-content"},Object(i.mdx)("p",{parentName:"div"},"This feature is currently only available for selected projects. If you would like this to be activated for one of your projects please contact Annotell."))),Object(i.mdx)("p",null,"This section describes how you can fetch annotations in the OpenLABEL format (see ",Object(i.mdx)("a",{parentName:"p",href:"/annotell-python/docs/#annotation"},"Annotation Format"),"). These annotations are\nautomatically available as soon as they are finished and can be downloaded either for a whole project/batch or individually via the methods listed below.\nAll methods returns either a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"Annotation")," object or a generator yielding ",Object(i.mdx)("inlineCode",{parentName:"p"},"Annotation")," objects, which contains indentifiers as well\nas a dictionary containing the OpenLABEL json:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass Annotation:\n    annotation_uuid: str\n    input_uuid: str\n    annotation_type: str\n    content: Dict\n    created: datetime\n")),Object(i.mdx)("p",null,"As can be seen in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Annotation")," model, an annotation is unique for each input and annotation-type.\nThe OpenLABEL json can be used as is or it can be converted into a pythonic object using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"annotell-openlabel")," library, see\n",Object(i.mdx)("a",{parentName:"p",href:"/annotell-python/docs/#annotation"},"Convert to OpenLABEL"),"."),Object(i.mdx)("h3",{id:"get-single-annotation"},"Get Single Annotation"),Object(i.mdx)("h4",{id:"using-input-and-annotation-type"},"Using input and annotation type"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-python"},"client = InputApiClient()\nannotation = client.annotation.get_annotation(input_uuid=input_uuid,\n                                              annotation_type=annotation_type)\n")),Object(i.mdx)("p",null,"This method returns a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"Annotation")," object, containing the OpenLABEL json, using an input uuid and an annotation type."),Object(i.mdx)("h4",{id:"using-annotation-uuid"},"Using Annotation UUID"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-python"},"client = InputApiClient()\nannotation = client.annotation.get_annotation(annotation_uuid=annotation_uuid)\n")),Object(i.mdx)("p",null,"This method returns a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"Annotation")," object, containing the OpenLABEL json, using an annotation uuid. This method is useful since after you have\ndownloaded the annotation once you only need to save the annotation uuid as a unique identifier for the annotation."),Object(i.mdx)("h3",{id:"get-annotations-for-a-project-or-batch"},"Get Annotations for a Project or Batch"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-python"},'def run(client: InputApiClient,\n        project: str,\n        annotation_type: str,\n        batch: Optional[str] = None) -> Generator[Annotation, None, None]:\n    annotation_generator = client.annotation.get_project_annotations(project=project,\n                                                            batch=batch,\n                                                            annotation_type=annotation_type)\n    return annotation_generator\n\n\nif __name__ == \'__main__\':\n    setup_logging(level="INFO")\n    client = InputApiClient()\n\n    # Project - Available via `client.project.get_projects()`\n    project = "<project-idenfitier>"\n    annotation_type = "<annotation-type>"\n    annotation_generator = run(client, project, annotation_type)\n    for annotation in annotation_generator:\n        print(annotation)\n')),Object(i.mdx)("p",null,"This example fetches annotations for an entire project or batch. It returns a generator which will yield ",Object(i.mdx)("inlineCode",{parentName:"p"},"Annotation")," objects for all finished annotations."))}d.isMDXComponent=!0}}]);