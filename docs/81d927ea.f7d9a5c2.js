(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n(3),r=n(7),i=(n(0),n(83)),o={title:"Images"},c={unversionedId:"input-api/inputs/images",id:"input-api/inputs/images",isDocsHomePage:!1,title:"Images",description:"Single Image",source:"@site/docs/input-api/inputs/images.md",slug:"/input-api/inputs/images",permalink:"/annotell-python/docs/input-api/inputs/images",editUrl:"https://github.com/annotell/annotell-python/edit/gh-pages/docs-src/docs/input-api/inputs/images.md",version:"current",sidebar:"docs",previous:{title:"General",permalink:"/annotell-python/docs/input-api/input"},next:{title:"Point Cloud",permalink:"/annotell-python/docs/input-api/inputs/point_cloud"}},p=[{value:"Single Image",id:"single-image",children:[]},{value:"Image with Source Specification",id:"image-with-source-specification",children:[]}],s={rightToc:p};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"single-image"},"Single Image"),Object(i.b)("p",null,"Images inputs can be created from python via the ",Object(i.b)("em",{parentName:"p"},"upload_and_create_images_input_job")," method."),Object(i.b)("p",null,"The representation consists of the image name ","(","excluding the path to the image",")"," and the source of the image. In this case, we want to create a scene consisting of one image ",Object(i.b)("em",{parentName:"p"},"image1"),". We also specify a folder where the image is located."),Object(i.b)("p",null,"We start out by creating a representation of our image."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import annotell.input_api.model as IAM\n\nimage1 = "filename1.jpg"\nimages = [IAM.Image(filename=image1)]\nimages_files = IAM.ImagesFiles(images)\nfolder = Path("/home/user_name/example_path")\n')),Object(i.b)("p",null,"Next we can upload the images to a project"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# Project\nproject = "<external_id>"\n\nresponse = client.images.create(\n    folder=folder,\n    images_files=IAM.ImagesFiles(images),\n    project=project)\n')),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Use dryrun to validate input")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Setting ",Object(i.b)("inlineCode",{parentName:"p"},"dryrun")," parameter to true in the method call, will validate the input using the Input API but not create any inputs."))),Object(i.b)("h3",{id:"image-with-source-specification"},"Image with Source Specification"),Object(i.b)("p",null,"In a Scene with several images, it is possible to specify custom source names, and in which order they should appear."),Object(i.b)("p",null,"we do this by adding ",Object(i.b)("em",{parentName:"p"},Object(i.b)("strong",{parentName:"em"},"SceneMetaData"))," to the input, with the following properties."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Property"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"external_id"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Id which can be used to track progress of annotations with.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"source_specification"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Additional information about sources, includes ",Object(i.b)("inlineCode",{parentName:"td"},"source_to_pretty_name")," and ",Object(i.b)("inlineCode",{parentName:"td"},"source_order"),". Defines which source that should be shown first, the source_order, or a mapping of source names to a prettier name version displayed in the UI.")))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# Create objects representing the images and the scene\nimage1 = "filename1.jpg"\nimage2 = "filename2.jpg"\nimages = [IAM.Image(filename=image1, source="CAM1"),\n          IAM.Image(filename=image2, source="CAM2")]\nimages_files = IAM.ImagesFiles(images)\nfolder = Path("/home/user_name/example_path")\n\n# Project\nproject = "<external_id>"\n\n# Create Scene meta data\nsource_spec = IAM.SourceSpecification(source_to_pretty_name={"CAM1": "FC", "CAM2": "BC"},\n                                      source_order=["CAM1", "CAM2"])\nimages_metadata = IAM.SceneMetaData(external_id="2020-06-16",\n                                    source_specification=source_spec)\n# Create Input\nresponse = client.images.create(folder=folder,\n                                images_files=images_files,\n                                metadata=images_metadata,\n                                project=project)\n')))}l.isMDXComponent=!0},83:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),l=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=l(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=l(n),b=a,d=m["".concat(o,".").concat(b)]||m[b]||u[b]||i;return n?r.a.createElement(d,c(c({ref:t},s),{},{components:n})):r.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);