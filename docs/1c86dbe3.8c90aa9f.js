(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return o})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return O})),n.d(t,"useMDXComponents",(function(){return s})),n.d(t,"withMDXComponents",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=i.a.createContext({}),m=function(e){return function(t){var n=s(t.components);return i.a.createElement(e,d({},t,{components:n}))}},s=function(e){var t=i.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=s(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},j=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),o=s(n),m=a,u=o["".concat(d,".").concat(m)]||o[m]||b[m]||r;return n?i.a.createElement(u,p(p({ref:t},l),{},{components:n})):i.a.createElement(u,p({ref:t},l))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,d=new Array(r);d[0]=j;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,d[1]=l;for(var c=2;c<r;c++)d[c]=n[c];return i.a.createElement.apply(null,d)}return i.a.createElement.apply(null,n)}j.displayName="MDXCreateElement"},38:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return d})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return o}));var a=n(3),i=n(8),r=(n(0),n(114)),d={title:"Working with Inputs"},l={unversionedId:"input-api/working_with_inputs",id:"input-api/working_with_inputs",isDocsHomePage:!1,title:"Working with Inputs",description:"Creating Inputs",source:"@site/docs/input-api/working_with_inputs.md",slug:"/input-api/working_with_inputs",permalink:"/annotell-python/docs/input-api/working_with_inputs",editUrl:"https://github.com/annotell/annotell-python/edit/gh-pages/docs-src/docs/input-api/working_with_inputs.md",version:"current",sidebar:"docs",previous:{title:"Lidars and Cameras Sequence",permalink:"/annotell-python/docs/input-api/inputs/lidars_and_cameras_seq"},next:{title:"Motion Compensation for Multi-Lidar Setups",permalink:"/annotell-python/docs/input-api/inputs/lidars_with_imu_data"}},p=[{value:"Creating Inputs",id:"creating-inputs",children:[{value:"Adding inputs to latest open batch for a project",id:"adding-inputs-to-latest-open-batch-for-a-project",children:[]},{value:"Adding inputs to specified batchfor a project",id:"adding-inputs-to-specified-batchfor-a-project",children:[]},{value:"Adding inputs to an input list (deprecated)",id:"adding-inputs-to-an-input-list-deprecated",children:[]}]},{value:"Input Status",id:"input-status",children:[]},{value:"List Inputs",id:"list-inputs",children:[{value:"Response",id:"response",children:[]}]},{value:"Invalidate Inputs",id:"invalidate-inputs",children:[]},{value:"List Invalidated Inputs",id:"list-invalidated-inputs",children:[]}],c={rightToc:p};function o(e){var t=e.components,n=Object(i.default)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.default)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("h2",{id:"creating-inputs"},"Creating Inputs"),Object(r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"For detailed information about different input modalities, check the Input Types section."))),Object(r.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Annotell Users")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"As an Annotell user, it is possible to specify ",Object(r.mdx)("inlineCode",{parentName:"p"},"client_organization_id")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"InputApiClient")," constructor to create inputs on behalf of a client organization"))),Object(r.mdx)("p",null,"In order to create inputs, they need to be associated with a ",Object(r.mdx)("a",{parentName:"p",href:"project"},"project")," and an ",Object(r.mdx)("a",{parentName:"p",href:"project#batch"},"input batch"),". Consider the following project setup:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre"},"organization # root for projects\n\u2514\u2500\u2500 projects\n   \u251c\u2500\u2500 project-a\n       \u251c\u2500\u2500 batch-1 - completed\n       \u251c\u2500\u2500 batch-2 - open\n           \u251c\u2500\u2500 input 0edb8f59-a8ea-4c9b-aebb-a3caaa6f2ba3\n           \u251c\u2500\u2500 input 37d9dda4-3a29-4fcb-8a71-6bf16d5a9c36\n           \u2514\u2500\u2500 ...\n       \u2514\u2500\u2500 batch-3 - pending\n   \u2514\u2500\u2500 project-b\n       \u251c\u2500\u2500 batch-1\n       \u2514\u2500\u2500 ...\n")),Object(r.mdx)("p",null,"There are 3 ways in order to create inputs"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Adding inputs to latest open batch for a project"),Object(r.mdx)("li",{parentName:"ul"},"Adding inputs to specified batch for a project"),Object(r.mdx)("li",{parentName:"ul"},"Adding inputs to an input list (deprecated)")),Object(r.mdx)("p",null,"The following examples all use an input of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cameras"),", however the interface applies to all input types."),Object(r.mdx)("h3",{id:"adding-inputs-to-latest-open-batch-for-a-project"},"Adding inputs to latest open batch for a project"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-python"},'client.cameras.create(\n    ...,\n    project="project-a")\n')),Object(r.mdx)("p",null,"Will add inputs to ",Object(r.mdx)("inlineCode",{parentName:"p"},"project-a")," ",Object(r.mdx)("inlineCode",{parentName:"p"},"batch-2")," because it's the latest open batch."),Object(r.mdx)("h3",{id:"adding-inputs-to-specified-batchfor-a-project"},"Adding inputs to specified batchfor a project"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-python"},'client.cameras.create(\n    ...,\n    project="project-a",\n    batch="batch-3")\n')),Object(r.mdx)("p",null,"Will add inputs to ",Object(r.mdx)("inlineCode",{parentName:"p"},"project-a")," ",Object(r.mdx)("inlineCode",{parentName:"p"},"batch-3"),"."),Object(r.mdx)("h3",{id:"adding-inputs-to-an-input-list-deprecated"},"Adding inputs to an input list (deprecated)"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-python"},"client.cameras.create(\n    ...,\n    input_list_id=500)\n")),Object(r.mdx)("p",null,"Will add inputs to input list ",Object(r.mdx)("inlineCode",{parentName:"p"},"500"),"."),Object(r.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"deprecated input_list_id")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"Using input lists is deprecated and will be removed in future releases"))),Object(r.mdx)("h2",{id:"input-status"},"Input Status"),Object(r.mdx)("p",null,"Once an input has been created, it might be preprocessed before being made available for annotation. Also, postprocessing such as conversion to the client-specific format might take place after annotation has been performed. During this process, the status property of an input can be used to keep track of progress."),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:null},"Status"),Object(r.mdx)("th",{parentName:"tr",align:null},"Description"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"processing"),Object(r.mdx)("td",{parentName:"tr",align:null},"Input has been received and currently processed by Annotell Platform, potentially performing conversion of file formats")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"created"),Object(r.mdx)("td",{parentName:"tr",align:null},"Input is created and available for annotation")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"failed"),Object(r.mdx)("td",{parentName:"tr",align:null},"Conversion of input failed")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"invalidated:broken-input"),Object(r.mdx)("td",{parentName:"tr",align:null},"Input was invalidated since it did not load")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"invalidated:duplicate"),Object(r.mdx)("td",{parentName:"tr",align:null},"Input was invalidated due to being uploaded several times")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"invalidated:incorrectly-created"),Object(r.mdx)("td",{parentName:"tr",align:null},"Input was invalidated because it was incorrectly created")))),Object(r.mdx)("h2",{id:"list-inputs"},"List Inputs"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-python"},'project = "project-identifier"\nclient.input.get_inputs(project=project)\n')),Object(r.mdx)("p",null,"Inputs can be retrieved via the API by specifying project. Additional filter parameters are also available (see below) for querying inputs."),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:null},"Parameter"),Object(r.mdx)("th",{parentName:"tr",align:null},"Description"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"project"),Object(r.mdx)("td",{parentName:"tr",align:null},"Project identifier to filter by")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"batch"),Object(r.mdx)("td",{parentName:"tr",align:null},"Which batch in the project to return inputs for")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"external_ids"),Object(r.mdx)("td",{parentName:"tr",align:null},"Return inputs matching the ",Object(r.mdx)("inlineCode",{parentName:"td"},"external_ids")," supplied")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"include_invalidated"),Object(r.mdx)("td",{parentName:"tr",align:null},"Filters inputs based on their status, defaults to ",Object(r.mdx)("inlineCode",{parentName:"td"},"False"))))),Object(r.mdx)("h3",{id:"response"},"Response"),Object(r.mdx)("p",null,"The response is a list of ",Object(r.mdx)("inlineCode",{parentName:"p"},"Input")," objects containing the following properties"),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:null},"Property"),Object(r.mdx)("th",{parentName:"tr",align:null},"Description"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"uuid"),Object(r.mdx)("td",{parentName:"tr",align:null},"ID used to identify the input within the Annotell Platform")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"external_id"),Object(r.mdx)("td",{parentName:"tr",align:null},"External ID supplied during input creation")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"batch"),Object(r.mdx)("td",{parentName:"tr",align:null},"Which batch does the input belong to")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"view_link"),Object(r.mdx)("td",{parentName:"tr",align:null},"A url to view the input in the Annotell Platform")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"input_type"),Object(r.mdx)("td",{parentName:"tr",align:null},"Type of input (see ",Object(r.mdx)("a",{parentName:"td",href:"/annotell-python/docs/"},"Input Types"),")")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"status"),Object(r.mdx)("td",{parentName:"tr",align:null},"Input status (see ",Object(r.mdx)("a",{parentName:"td",href:"#input-status"},"Input Statuses"),")")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"error_message"),Object(r.mdx)("td",{parentName:"tr",align:null},"If there is an error during input creation the error message will be included, otherwise it's ",Object(r.mdx)("inlineCode",{parentName:"td"},"None"))))),Object(r.mdx)("h2",{id:"invalidate-inputs"},"Invalidate Inputs"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-python"},'invalid_ids = ["0edb8f59-a8ea-4c9b-aebb-a3caaa6f2ba3", "37d9dda4-3a29-4fcb-8a71-6bf16d5a9c36"]\nreason = IAM.InvalidatedReasonInput.BAD_CONTENT\nclient.input.invalidate_inputs(invalid_ids, reason)\n')),Object(r.mdx)("p",null,"If issues are detected upstream related to inputs created, it is possible to invalidate inputs.\nInvalidated inputs will not produce annotations and any completed annotations of the input will be invalidated."),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:null},"Reason"),Object(r.mdx)("th",{parentName:"tr",align:null},"Description"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"bad-content"),Object(r.mdx)("td",{parentName:"tr",align:null},"Input does not load, or has erroneous metadata such as invalid calibration")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"duplicate"),Object(r.mdx)("td",{parentName:"tr",align:null},"If same input has been created several times")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"incorrectly-created"),Object(r.mdx)("td",{parentName:"tr",align:null},"If the input was unintentionally created.")))),Object(r.mdx)("h2",{id:"list-invalidated-inputs"},"List Invalidated Inputs"),Object(r.mdx)("p",null,"If errors are detected by Annotell, inputs will be invalidated and a reason will be supplied."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-python"},'project = "project-identifier"\nclient.input.get_inputs(project=project, include_invalidated=True)\n')))}o.isMDXComponent=!0}}]);