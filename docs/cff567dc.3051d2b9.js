(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return p})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return h})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=m(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=m(n),d=r,u=p["".concat(o,".").concat(d)]||p[d]||f[d]||i;return n?a.a.createElement(u,c(c({ref:t},s),{},{components:n})):a.a.createElement(u,c({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},48:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(3),a=(n(0),n(107));const i={title:"LidarsAndCameras"},o={unversionedId:"input-api/inputs/lidars_and_cameras",id:"input-api/inputs/lidars_and_cameras",isDocsHomePage:!1,title:"LidarsAndCameras",description:"All of the inputs at Annotell consists of one or several frames where a frame consists of inputs from several sensors, e.g. cameras or lidars. A LidarsAndCameras input consists of a single frame which contains 1-8 cameras images as well as a single pointcloud.",source:"@site/docs/input-api/inputs/lidars_and_cameras.md",slug:"/input-api/inputs/lidars_and_cameras",permalink:"/annotell-python/docs/input-api/inputs/lidars_and_cameras",editUrl:"https://github.com/annotell/annotell-python/edit/gh-pages/docs-src/docs/input-api/inputs/lidars_and_cameras.md",version:"current",sidebar:"docs",previous:{title:"Lidars \ud83d\udea7",permalink:"/annotell-python/docs/input-api/inputs/lidars"},next:{title:"CamerasSeq",permalink:"/annotell-python/docs/input-api/inputs/cameras_seq"}},s=[{value:"Creating the input",id:"creating-the-input",children:[]}],c={rightToc:s};function l({components:e,...t}){return Object(a.mdx)("wrapper",Object(r.default)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(a.mdx)("p",null,"All of the inputs at Annotell consists of one or several frames where a frame consists of inputs from several sensors, e.g. cameras or lidars. A ",Object(a.mdx)("inlineCode",{parentName:"p"},"LidarsAndCameras")," input consists of a ",Object(a.mdx)("em",{parentName:"p"},"single")," frame which contains 1-8 cameras images as well as a single pointcloud."),Object(a.mdx)("h2",{id:"creating-the-input"},"Creating the input"),Object(a.mdx)("p",null,"In order to create a ",Object(a.mdx)("inlineCode",{parentName:"p"},"LidarsAndCameras")," you need to specify the following parameters"),Object(a.mdx)("table",null,Object(a.mdx)("thead",{parentName:"table"},Object(a.mdx)("tr",{parentName:"thead"},Object(a.mdx)("th",{parentName:"tr",align:null},"Parameter"),Object(a.mdx)("th",{parentName:"tr",align:null},"Description"))),Object(a.mdx)("tbody",{parentName:"table"},Object(a.mdx)("tr",{parentName:"tbody"},Object(a.mdx)("td",{parentName:"tr",align:null},"external_id"),Object(a.mdx)("td",{parentName:"tr",align:null},"Id which can be used to track progress of annotations with.")),Object(a.mdx)("tr",{parentName:"tbody"},Object(a.mdx)("td",{parentName:"tr",align:null},"sensor_specification"),Object(a.mdx)("td",{parentName:"tr",align:null},"Additional information about sensors, includes ",Object(a.mdx)("inlineCode",{parentName:"td"},"sensor_to_pretty_name")," and ",Object(a.mdx)("inlineCode",{parentName:"td"},"sensor_order"),". Defines which sensor that should be shown first, the sensor_order, or a mapping of sensor names to a prettier name version displayed in the Annotell Annotation Tool.")),Object(a.mdx)("tr",{parentName:"tbody"},Object(a.mdx)("td",{parentName:"tr",align:null},"calibration_id"),Object(a.mdx)("td",{parentName:"tr",align:null},"Which calibration to use for the input.")),Object(a.mdx)("tr",{parentName:"tbody"},Object(a.mdx)("td",{parentName:"tr",align:null},"frame"),Object(a.mdx)("td",{parentName:"tr",align:null},"Specifies which camera images and lidar pointclouds constitute the frame.")))),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-python",metastring:"reference",reference:!0},"https://github.com/annotell/annotell-python/blob/master/annotell-input-api/examples/lidars_and_cameras.py\n")))}l.isMDXComponent=!0}}]);