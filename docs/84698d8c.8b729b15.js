(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{73:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(3),i=a(7),r=(a(0),a(83)),o={title:"Point Cloud"},c={unversionedId:"input-api/inputs/point_cloud",id:"input-api/inputs/point_cloud",isDocsHomePage:!1,title:"Point Cloud",description:"Supported point cloud formats are .csv, .pcd or .las",source:"@site/docs/input-api/inputs/point_cloud.md",slug:"/input-api/inputs/point_cloud",permalink:"/annotell-python/docs/input-api/inputs/point_cloud",editUrl:"https://github.com/annotell/annotell-python/edit/gh-pages/docs-src/docs/input-api/inputs/point_cloud.md",version:"current",sidebar:"docs",previous:{title:"Images",permalink:"/annotell-python/docs/input-api/inputs/image"},next:{title:"Calibration",permalink:"/annotell-python/docs/input-api/calibration"}},l=[{value:"Point Clouds with Images",id:"point-clouds-with-images",children:[{value:"PointCloudsWithImages",id:"pointcloudswithimages",children:[]},{value:"Scene metadata",id:"scene-metadata",children:[]},{value:"Creating the input",id:"creating-the-input",children:[]},{value:"Full example code",id:"full-example-code",children:[]}]}],p={rightToc:l};function b(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Supported point cloud formats")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Supported point cloud formats are ",Object(r.b)("inlineCode",{parentName:"p"},".csv"),", ",Object(r.b)("inlineCode",{parentName:"p"},".pcd")," or ",Object(r.b)("inlineCode",{parentName:"p"},".las")))),Object(r.b)("h2",{id:"point-clouds-with-images"},"Point Clouds with Images"),Object(r.b)("p",null,"Create representation of images and point clouds + source specification images"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'image1 = IAM.Image(filename="filename_image1.jpg", source="RFC01")\npc = IAM.PointCloud(filename="filename_pc.pcd")\npoint_clouds_with_images = IAM.PointCloudsWithImages(images=[image1],\n                                                     point_clouds=[pc])\nfolder = Path("/home/user_name/example_path/")  # Folder to where the data is\n')),Object(r.b)("h3",{id:"pointcloudswithimages"},"PointCloudsWithImages"),Object(r.b)("p",null,"We start off by creating a representation of the images and the point cloud that make up the scene along with a SourceSpecification for the images."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"images"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2D Images")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"point_clouds"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"LiDAR point clouds in any of the supported formats (.csv, .pcd or .las)")))),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"no multi-lidar support currently")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Currently there is only support for supplying a single point cloud"))),Object(r.b)("h3",{id:"scene-metadata"},"Scene metadata"),Object(r.b)("p",null,"Add Scene metadata"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'scene_external_id = "Scene X collection 2020-06-16"\ncalibration_id = 100\nmetadata = IAM.CalibratedSceneMetaData(external_id=scene_external_id,\n                                       source_specification=source_specification,\n                                       calibration_id=calibration_id)\n')),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"external_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Id which can be used to track progress of annotations with.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"source_specification"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Additional information about sources, includes ",Object(r.b)("inlineCode",{parentName:"td"},"source_to_pretty_name")," and ",Object(r.b)("inlineCode",{parentName:"td"},"source_order"),". Defines which source that should be shown first, the source_order, or a mapping of source names to a prettier name version displayed in the UI.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"calibration_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Which calibration to use for the input.")))),Object(r.b)("p",null,"See calibration section for more information on how to retrieve a calibration_id."),Object(r.b)("h3",{id:"creating-the-input"},"Creating the input"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Create input")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'client.create_inputs_point_cloud_with_images(folder=folder,\n                                             point_clouds_with_images=point_clouds_with_images,\n                                             metadata=metadata,\n                                             project="my_project")\n')),Object(r.b)("p",null,"Now everything required is prepared in order to use ",Object(r.b)("inlineCode",{parentName:"p"},"create_inputs_point_cloud_with_images"),"."),Object(r.b)("h3",{id:"full-example-code"},"Full example code"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Full example for creating an input consisting of a point cloud and one images. Including creating a new calibration for the input.")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import annotell.input_api.input_api_model as IAM\nimport annotell.input_api.model.calibration as Calibration\nimport annotell.input_api.input_api_client as IAC\nfrom pathlib import Path\nclient = IAC.InputApiClient()\n# Create representation of images and point clouds + source specification images\nimage1 = IAM.Image(filename="filename_image1.jpg", source="RFC01")\npc = IAM.PointCloud(filename="filename_pc.pcd")\npoint_clouds_with_images = IAM.PointCloudsWithImages(images=[image1],\n                                                     point_clouds=[pc])\nfolder = Path("/home/user_name/example_path/")  # Folder to where the data is\n# Create lidar calibration\nlidar_position = Calibration.Position(x=0.0, y=0.0, z=0.0)\nlidar_rotation = Calibration.RotationQuaternion(w=1.0, x=0.0, y=0.0, z=0.0)\nlidar_calibration = Calibration.LidarCalibrationExplicit(position=lidar_position,\n                                                         rotation_quaternion=lidar_rotation)\n# Create a camera calibration\nrfc_01_camera_type = Calibration.CameraType.PINHOLE\nrfc_01_position = Calibration.Position(x=0.0, y=0.0, z=0.0)  # similar to Lidar\nrfc_01_rotation = Calibration.RotationQuaternion(w=1.0, x=0.0, y=0.0, z=0.0)  # similar to Lidar\nrfc_01_camera_matrix = Calibration.CameraMatrix(fx=3450, fy=3250, cx=622, cy=400)\nrfc_01_distortion_coefficients = Calibration.DistortionCoefficients(k1=0.0, k2=0.0, p1=0.0, p2=0.0, k3=0.0)\nrfc_01_properties = Calibration.CameraProperty(camera_type=rfc_01_camera_type)\ncamera_calibration_rfc_01 = Calibration.CameraCalibrationExplicit(position=rfc_01_position,\n                                                                  rotation_quaternion=rfc_01_rotation,\n                                                                  camera_matrix=rfc_01_camera_matrix,\n                                                                  distortion_coefficients=rfc_01_distortion_coefficients,\n                                                                  camera_properties=rfc_01_properties,\n                                                                  image_height=920,\n                                                                  image_width=1244)\n\n# Create calibration for the scene\ncalibration_dict = dict(RFC01=camera_calibration_rfc_01,\n                        lidar=lidar_calibration)\ncalibration = IAM.Calibration(calibration_dict=calibration_dict)\ncalibration_external_id = "Collection 2020-06-16"\ncalibration_spec = IAM.CalibrationSpec(external_id=calibration_external_id,\n                                       calibration=calibration)\n# Create the calibration using the Input API client\ncreated_calibration = client.create_calibration_data(calibration_spec=calibration_spec)\n\n# Create metadata\nscene_external_id = "Scene X collection 2020-06-16"\nmetadata = IAM.CalibratedSceneMetaData(external_id=scene_external_id,\n                                       calibration_id=created_calibration.id)\n\n# Add input\nclient.create_inputs_point_cloud_with_images(folder=folder,\n                                             point_clouds_with_images=point_clouds_with_images,\n                                             metadata=metadata,\n                                             project="my_project")\n')),Object(r.b)("p",null,"Putting this together, we first create a representation of the input and its metadata, create or reuse calibration and then uploads the input."))}b.isMDXComponent=!0},83:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=i.a.createContext({}),b=function(e){var t=i.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},d=function(e){var t=b(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=b(a),u=n,m=d["".concat(o,".").concat(u)]||d[u]||s[u]||r;return a?i.a.createElement(m,c(c({ref:t},p),{},{components:a})):i.a.createElement(m,c({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var p=2;p<r;p++)o[p]=a[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);